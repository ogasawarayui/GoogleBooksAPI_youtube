import React, { useState, useEffect } from 'react';
import { Line } from 'react-chartjs-2';
import PopulationLineChart from './PopulationLineChart'; // 人口構成の折れ線グラフを表示するコンポーネント

const apiKey = 'https://opendata.resas-portal.go.jp';
const endpointUrl = 'https://opendata.resas-portal.go.jp/api/v1/prefectures';

const CheckboxList = () => {
  const [prefectures, setPrefectures] = useState([]);
  const [selectedPrefectures, setSelectedPrefectures] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(endpointUrl, {
          headers: {
            'X-API-KEY': apiKey,
          },
        });
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        setPrefectures(data.result);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };
    fetchData();
  }, []);

  const handleCheckboxChange = (event) => {
    const { value, checked } = event.target;
    if (checked) {
      setSelectedPrefectures([...selectedPrefectures, value]);
    } else {
      setSelectedPrefectures(selectedPrefectures.filter(prefecture => prefecture !== value));
    }
  };

  return (
    <div>
      <h2>都道府県一覧</h2>
      {prefectures.map(prefecture => (
        <div key={prefecture.prefCode}>
          <label>
            <input
              type="checkbox"
              value={prefecture.prefName}
              checked={selectedPrefectures.includes(prefecture.prefName)}
              onChange={handleCheckboxChange}
            />
            {prefecture.prefName}
          </label>
        </div>
      ))}
    </div>
  );
};

export default CheckboxList;

const PopulationComposition = ({ selectedPrefectures }) => {
  const [populationComposition, setPopulationComposition] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      if (selectedPrefectures.length === 0) {
        setPopulationComposition(null);
        return;
      }

      try {
        const response = await fetch('https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-API-KEY': apiKey,
          },
          body: JSON.stringify({
            prefCode: selectedPrefectures.map(prefName => {
              const prefecture = prefectures.find(prefecture => prefecture.prefName === prefName);
              return prefecture ? prefecture.prefCode : null;
            }),
            cityCode: [],
            matter: 1, // 人口構成
          }),
        });
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        setPopulationComposition(data.result.data);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };
    fetchData();
  }, [selectedPrefectures]);

  return (
    <div>
      <h2>人口構成</h2>
      {populationComposition ? (
        <pre>{JSON.stringify(populationComposition, null, 2)}</pre>
      ) : (
        <p>選択された都道府県の人口構成データはありません。</p>
      )}
    </div>
  );
};

export default PopulationComposition;

const PopulationStatistics = ({ populationData }) => {
  const [selectedCategory, setSelectedCategory] = useState('total'); // 初期値は総人口

  const filterPopulationData = (category) => {
    switch (category) {
      case 'total':
        return populationData.total;
      case 'young':
        return populationData.young;
      case 'working':
        return populationData.working;
      case 'elderly':
        return populationData.elderly;
      default:
        return populationData.total;
    }
  };

  return (
    <div>
      <h2>人口統計</h2>
      <div>
        <button onClick={() => setSelectedCategory('total')}>総人口</button>
        <button onClick={() => setSelectedCategory('young')}>年少人口</button>
        <button onClick={() => setSelectedCategory('working')}>生産年齢人口</button>
        <button onClick={() => setSelectedCategory('elderly')}>老年人口</button>
      </div>
      <PopulationLineChart populationData={filterPopulationData(selectedCategory)} />
    </div>
  );
};

export default PopulationStatistics;
